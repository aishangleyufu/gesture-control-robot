/*======
使用定时器1，OCR1A,OCR1B,OCR1C三个管脚同时输出PWM波形
在快速PWM的模式下，top=0x03ff=1023
OCRnX在top时刻更新
频率=8000000/8/1023=977.5HZ
=======================================================*/
#include <iom128v.h> 
#include <macros.h> 
int action_series_step=0;
int action_series_number=0;
int action_series_flag=0;
char data=0;
char data_temp=0;

#define uchar unsigned char //定义无符号字符为 uchar
#define uint unsigned int //定义无符号整型
#define Crystal 16000000 //晶振8MHZ
#define Baud 115200 //波特率?
#define fosc 16000000 
#define baud 115200  //波特率
uchar data_temp;
char data1;
uchar usart0_data_counter=0;//串口接收中断计数
uchar usart0_data_receive[3]={0x0f,0x0f,0x0f};//接收串口数据

void uart1_init(void) //USART1初始化
{
 DDRD|=(1<<2)|(1<<3);   //  IO
 UCSR1B = 0x00;   //关闭USART1
 UCSR1A = 0x00;   //不适使用倍速发送
 UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//数据位为八位
 UBRR1L=(fosc/16/(baud+1))%256;//异步正常模式下，UBRR的计算公式
 UBRR1H=(fosc/16/(baud+1))/256;
 UCSR1B =(1<<RXEN1)|(1<<TXEN1); //接收使能，传送使能
}
/****************************************************************************
函数功能:uart1发送单字节数据
入口参数:c
出口参数:
****************************************************************************/
void putchar1(unsigned char c)//串口1发送字符
 {  
     while (!(UCSR1A&(1<<UDRE1)));//表明发送器一准备就绪
  UDR1=c;    
 } 
 
/****************************************************************************
函数功能:uart1接收单字节数据
入口参数:
出口参数:
****************************************************************************/
unsigned char getchar1(void) //串口1接回收数据
   {
  while(!(UCSR1A& (1<<RXC1)));
     return UDR1;   //将接收到的字符返回
 } 
 
/****************************************************************************
函数功能:uart1发送字符串数据
入口参数:*s
出口参数:
****************************************************************************/    
void puts1(char *s)
 {
 while (*s)
  {
  putchar1(*s);
  s++;
  } 
        putchar1(0x0a);//回车换行
     putchar1(0x0d);
 } 
 

/*
//****************发送一个字符******************************
void usart0_char_send(uchar i){
while(!(UCSR0A&(1<<UDRE0)));
UDR0=i;
}


void usart0_str_send(char *s)
{while(*s){
usart0_char_send(*s);
s++;}
}


void usart0_str_sendArray(uchar *p,uchar len){
 uchar i;
 for(i=0;i<len;i++) //控制字符个数
 { usart0_char_send(*p);
  p++;
   }
   }
 
 

 void usart0_init(void){
 UCSR0B = 0x00; //禁止发送和接收
 UCSR0A = 0x00; //倍速异步模式USX0=1?
 UCSR0C = 0x06; //0000 0110，UCSZ01=1，UCSZ00=1；8位字符，1位停止位
 UBRR0L=(Crystal/16/(Baud+1))%256; //若为正常异步模式USX0=0则位(Crystal/16/(Baud+1))%256
 UBRR0H=(Crystal/16/(Baud+1))/256; //参见ATMEGA128使用手册
 UCSR0B=0x98 ;	//允许发送和接收,接收结束中断使能
 }


 #pragma interrupt_handler usart0_TX_interrupt:iv_USART0_TX // 21
 void usart0_TX_interrupt(void){
  _NOP();
  UCSR0A |= (1<<6); 
  //发送结束清零
  }
*/
  #pragma interrupt_handler usart1_RX_interrupt:iv_USART1_RX // 33
  void usart1_RX_interrupt(void){
  //UCSR0B=0x00; //禁止发送和接收?
   data_temp = UDR1; //从数据缓冲器中接收数据
   usart0_data_receive[usart0_data_counter]=data_temp;
   usart0_data_counter++;
   //UCSR0B=0xD8 ; //允许发送和接收,接收和发送结束中断使能
   if(usart0_data_counter==3) //如果已接收到的字符个数为3?
    {usart0_data_counter = 0; //计数复位?
	}
	}
	
void delay_1ms(void)//1ms延时函数 
{ 
  long int i; 
  for (i=0;i<150*16;i++) ;//因为是8M晶振，所以这里乘8，这个延时不够精准 
  
}    
void delay_nms(long int n)//延时n毫秒 
{ 
  long int i; 
  for (i=0;i<n;i++)//执行n次1毫秒延时 
  {delay_1ms();}  
} 

void action_set(int ch_1a, int ch_1b, int ch_1c, int ch_3a, int ch_3b, int ch_3c, int action_do_last)
{
    OCR1A=ch_1a+3350;
	OCR1B=ch_1b+3350;
	OCR1C=ch_1c+3200;
	OCR3A=ch_3a+3500;
	OCR3B=ch_3b+3200;
	OCR3C=ch_3c+3200;
	/*
	OCR1C=3200;   //2000---3000--4000
OCR1B=3350;
OCR1A=3350;
OCR3C=3200;
OCR3B=3200;
OCR3A=3500;
*/
}

void action_base(int number)
{ 
switch(number)
{
case 0:
action_set(0,0,0,0,0,0,100);
break; //直立
//case 1:{action_set(0,0,-200,700,0,0,50);break;} //右脚左倾											   #####
case 1:
action_set(0,0,-750,1200,0,0,40);
break; //左脚左倾	  			-300/-400						#####
case 2:
action_set(0,0,-600,0,1200,1200,100);
break; //右抬脚，同时右脚放平							 #####
//case 4:{action_set(700,700,-350,-400,700,700,50);break;} //左弯脚 3,4可以一起完成
//case 5:{action_set(700,700,0,0,700,700,50);break;} //转正	
case 3:
action_set(300,600,0,0,600,900,75);
break; //前倾，1号舵机-500，6号舵机+500，把重心转移到前脚上#####
case 4:
action_set(300,600,450,350,600,900,50);
break; //左脚右倾	 	前倾								  #####
//case 8:{action_set(400,700,-750,300,700,1000,50);break;} //右脚右倾，度数还得减小	 
case 5:
action_set(300,600,0,300,0,300,50);
break; //右脚立正  ，前倾
case 6:
action_set(0,0,0,300,0,0,25);
break; //左脚回正	 	同时，左脚放平，取消前倾			   #####
case 7:
action_set(-600,-600,0,300,0,0,25);
break; //左抬脚										   #####
//case 12:{action_set(-700,-700,400,300,-700,-700,50);break;} //右弯脚	11,12可以一起完成 ，前脚未着地
//case 13:{action_set(-700,-700,0,0,-700,-700,50);break;} //右转正 
case 8:
action_set(-600,-400,0,0,-400,-600,75);
break; //前倾，1号舵机-500，6号舵机+500，把重心转移到前脚上，左脚稍弯##### 
case 9:
action_set(-600,-400,-350,-450,-400,-600,50);
break; //右脚左倾   	前倾								#####
//case 16:{action_set(-1000,-700,-250,-350,-700,-400,50);break;} //左脚左倾   
case 10:
action_set(0,0,-300,-450,-600,-600,50);
break; //左立正，前倾
//case 10:{action_set(0,0,-300,0,0,0,75);break;} //右回正，取消前倾可以回到3，右抬脚，或者回到0		  #####

case 11:
action_set(0,0,-300,0,-600,-800,50);
break; //右后抬脚，同时右脚放平							 #####
case 12:
action_set(-750,-400,0,0,-400,-750,75);
break; //后倾，1号舵机+500，6号舵机-500，重心转移到后脚，右脚稍弯#####
case 13:
action_set(-750,-400,400,300,-400,-750,50);
break; //脚右倾	 	
case 14:action_set(-750,-600,0,250,0,0,50);
break; //右脚回正	 	同时，左脚放平，取消前倾			   #####								  #####
case 15:
action_set(0,0,0,250,0,0,40);
break; //右脚回正	 	同时，左脚放平，取消前倾			   #####
case 16:
action_set(600,600,0,250,0,0,40);
break; //左后抬脚										   #####
case 17:
action_set(600,600,0,0,600,600,50);
break; //后倾，1号舵机+500，6号舵机-500，把重心转移到前脚上##### 
case 18:
action_set(600,600,-350,-450,600,600,50);
break; //脚左倾   									#####
case 19:
action_set(0,0,-300,-450,600,600,50);
break; //脚左倾   									#####
case 20:
action_set(0,0,-300,0,0,0,50);
break; //左回正，取消前倾可以回到3，右抬脚，或者回到0		  #####

}
}


void action_series_do()
{switch(action_series_number)
{	  
	case 1:
	{switch(action_series_step)
		{case 1 : {action_base(20);break;} 
    	 case 2 : {action_base(10);break;}
		 case 3 : {action_base(9);break;}
		 case 4 : {action_base(8);break;}
		 case 5 : {action_base(7);break;}
		 case 6 : {action_base(6);break;}
		 case 7 : {action_base(5);break;}
		 case 8 : {action_base(4);break;}
		 case 9 : {action_base(3);break;}
		 case 10 : {action_base(2);break;}
		 case 11 : {action_base(1);break;}
		};break;} 
	 case 2:
	{switch(action_series_step)
		{case 1 : {action_base(20);break;} 
    	 case 2 : {action_base(10);break;}
		 case 3 : {action_base(9);break;}
		 case 4 : {action_base(8);break;}
		 case 5 : {action_base(7);break;}
		 case 6 : {action_base(6);break;}
		 case 7 : {action_base(5);break;}
		 case 8 : {action_base(4);break;}
		 case 9 : {action_base(3);break;}
		 case 10 : {action_base(2);break;}
		};break;}

		case 3:
	{switch(action_series_step)
		{case 1 : {action_base(20);break;}
		 case 2 : {action_base(19);break;}
		 case 3 : {action_base(18);break;}
		 case 4 : {action_base(17);break;}
		 case 5 : {action_base(16);break;}
		 case 6 : {action_base(15);break;}
		 case 7 : {action_base(14);break;}
		 case 8 : {action_base(13);break;}
		 case 9 : {action_base(12);break;}
		 case 10 : {action_base(11);break;}
		 case 11 : {action_base(1);break;}
		};break;}
		case 4:
	{switch(action_series_step)
		{case 1 : {action_base(20);break;}
		 case 2 : {action_base(19);break;}
		 case 3 : {action_base(18);break;}
		 case 4 : {action_base(17);break;}
		 case 5 : {action_base(16);break;}
		 case 6 : {action_base(15);break;}
		 case 7 : {action_base(14);break;}
		 case 8 : {action_base(13);break;}
		 case 9 : {action_base(12);break;}
		 case 10 : {action_base(11);break;}
		};break;}
		case 5:
	{switch(action_series_step)
		{case 1 : {action_base(0);break;}
		 case 2 : {action_base(6);break;}
		 case 3 : {action_base(5);break;}
		 case 4 : {action_base(4);break;}
		 case 5 : {action_base(0);break;}
		};break;}
		case 6:
	{switch(action_series_step)
		{case 1 : {action_base(0);break;}
		 case 2 : {action_base(10);break;}
		 case 3 : {action_base(9);break;}
		 case 4 : {action_base(8);break;}
		 case 5 : {action_base(0);break;}
		};break;}
		case 7:
	{switch(action_series_step)
		{case 1 : {action_base(0);break;}
		 case 2 : {action_base(16);break;}
		 case 3 : {action_base(15);break;}
		 case 4 : {action_base(14);break;}
		 case 5 : {action_base(0);break;}
		};break;}
		case 8:
	{switch(action_series_step)
		{case 1 : {action_base(0);break;}
		 case 2 : {action_base(20);break;}
		 case 3 : {action_base(19);break;}
		 case 4 : {action_base(18);break;}
		 case 5 : {action_base(0);break;}
		};break;}
		case 9:
	{switch(action_series_step)
		{case 1 : {action_base(9);break;}
		 case 2 : {action_base(8);break;}
		 case 3 : {action_base(5);break;}
		 case 4 : {action_base(4);break;}
		 case 5 : {action_base(3);break;}
		 case 6 : {action_base(1);break;}
		};break;} 
		 case 10:
	{switch(action_series_step)
		{case 1 : {action_base(9);break;}
		 case 2 : {action_base(8);break;}
		 case 3 : {action_base(5);break;}
		 case 4 : {action_base(4);break;}
		};break;} 

			 }
if(--action_series_step==0)action_series_flag=0,action_series_number=0;//如果动作完成，则动作系列标志位置0

}

/********动作系列配置************/
void action_series_set(int number)
{
switch(number)
{case 1 : {action_series_number=1;action_series_step=11;break;}		 //启动并走一步
case 2 : {action_series_number=2;action_series_step=10;break;}		 //继续走
case 3 : {action_series_number=3;action_series_step=11;break;}		 //启动并后退一步
case 4 : {action_series_number=4;action_series_step=10;break;}		 //继续后退
case 5 : {action_series_number=5;action_series_step=6;break;}		 //继续后退
case 6 : {action_series_number=6;action_series_step=6;break;}		 //继续后退
case 7 : {action_series_number=7;action_series_step=6;break;}		 //继续后退
case 8 : {action_series_number=8;action_series_step=6;break;}		 //继续后退
case 9 : {action_series_number=9;action_series_step=6;break;}		 //继续后退
case 10 : {action_series_number=10;action_series_step=4;break;}		 //继续后退
}
action_series_flag=1;
}

void pwm_init(void)
{
DDRB|=BIT(PB7);
 DDRB|=BIT(PB6);
 DDRB|=BIT(PB5);
 DDRE|=BIT(PE3);
 DDRE|=BIT(PE4);
 DDRE|=BIT(PE5);
//将OCR1A管脚配置为输出

TCCR1B|=(1<<WGM12)|(1<<WGM13)|(1<<CS11);

//时钟8分频
TCCR1A|=(1<<COM1C1)|(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);   //选通ABC  
//TCCR1A|=(1<<COM1C1)|(1<<WGM11);

//快速PWM模式top:ICR1

ICR1=40000;

TCCR3B|=(1<<WGM12)|(1<<WGM13)|(1<<CS11)|(1<<CS01);
//(1<<WGM32)|(1<<WGM33)|(1<<CS31);
TCCR3A|=(1<<COM3A1)|(1<<COM3B1)|(1<<COM3C1)|(1<<WGM11);  //选通ABC
	ICR3=40000;


//周期20ms

OCR1C=3200;   //2000---3000--4000
OCR1B=3350;
OCR1A=3350;
OCR3C=3200;
OCR3B=3200;
OCR3A=3500;

//正脉宽


/*TCCR1B|=(1<<WGM12)|(1<<WGM13)|(1<<CS11);
TCCR1A|=(1<<COM1C1)|(1<<WGM11);
ICR1=40000;   */

}

void main (void)
{
 int i,j,k;
int number=0;
char rev=0;
   pwm_init();
   DDRE|=BIT(PE0);
   DDRE|=BIT(PE1);

 //usart0_init;//UART0初始化
  

uart1_init();
//清零计数器

while(1){
/*
for(i=0;i<1000;i++){
    for(j=0;j<300;j++){
       for(k=0;k<5;k++){   //k<10,约三秒  
         ; 
		 }
    }
}
*/
   number=number+1;
   if(number>10){
   number=0;
   }

 //usart0_str_send("UART0 works well!"); 
putchar1(1);
// action_series_set(number);
// action_series_do();
//action_base(number);

//usart0_char_send(0);


   
/*
    OCR1C=6000-OCR1C; 
	OCR1B=6000-OCR1B; 
	OCR1A=6000-OCR1A; 
    OCR3C=6000-OCR3C; 
	OCR3B=6000-OCR3B; 
	OCR3A=6000-OCR3A; 
	
	*/
}
}